{"version":3,"sources":["../src/message/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAgB,MAAM,qBAAqB,CAAC;AAShE,MAAM,WAAW,GAAG,UAAU,OAAiB,EAAE,QAAQ,GAAG,YAAY;IACtE,IAAI,CAAC,OAAO,EAAE;QACZ,MAAM,KAAK,GAAG,eAAe,EAAE,CAAC;QAChC,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACrC,OAAO,GAAG,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC;KACnC;IACD,MAAM,QAAQ,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,eAAe,CAAC,QAAQ,CAAC,CAAC;IACpD,IAAI,CAAC,QAAQ,EAAE;QACb,OAAO,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;QAC9C,OAAO,IAAI,CAAC;KACb;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC,CAAC;AAEF,MAAM,WAAW,GAAG,UAClB,OAAiC,EACjC,QAAqB,WAAW,CAAC,IAAI;IAErC,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC;IACtC,MAAM,QAAQ,GAAG,WAAW,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IAChD,IAAI,CAAC,QAAQ;QAAE,OAAO,OAAO,CAAC,MAAM,EAAE,CAAC;IAEvC,mBAAmB;IAEnB,QAAQ,CAAC,SAAS,CAAC,GAAG,EAAE;QACtB,QAAQ,CAAC,OAAO,iBAAG,KAAK,IAAK,OAAO,GAAI,QAAQ,CAAC,IAAI,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;IAEH,OAAO,QAAQ,CAAC;AAClB,CAAC,CAAC;AAEF,eAAe;IACb,IAAI,CAAC,OAAiC;QACpC,OAAO,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC;IAChD,CAAC;IACD,OAAO,CAAC,OAAiC;QACvC,OAAO,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC,OAAO,CAAC,CAAC;IACnD,CAAC;IACD,OAAO,CAAC,OAAiC;QACvC,OAAO,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC,OAAO,CAAC,CAAC;IACnD,CAAC;IACD,KAAK,CAAC,OAAiC;QACrC,OAAO,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;IACjD,CAAC;IACD,IAAI;QACF,MAAM,QAAQ,GAAG,WAAW,EAAE,CAAC;QAC/B,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO;SACR;QACD,QAAQ,CAAC,IAAI,EAAE,CAAC;IAClB,CAAC;CACF,CAAC","file":"index.js","sourcesContent":["import { MessageType, MessageProps } from './message.interface';\n\ntype Context = WechatMiniprogram.Page.TrivialInstance | WechatMiniprogram.Component.TrivialInstance;\n\ninterface MessageActionOptionsType extends Optional<MessageProps> {\n  context?: Context;\n  selector?: string;\n}\n\nconst getInstance = function (context?: Context, selector = '#t-message') {\n  if (!context) {\n    const pages = getCurrentPages();\n    const page = pages[pages.length - 1];\n    context = page.$$basePage || page;\n  }\n  const instance = context?.selectComponent(selector);\n  if (!instance) {\n    console.warn('未找到Message组件, 请检查selector是否正确');\n    return null;\n  }\n  return instance;\n};\n\nconst showMessage = function (\n  options: MessageActionOptionsType,\n  theme: MessageType = MessageType.info,\n) {\n  const { context, selector } = options;\n  const instance = getInstance(context, selector);\n  if (!instance) return Promise.reject();\n\n  // instance.hide();\n\n  instance.resetData(() => {\n    instance.setData({ theme, ...options }, instance.show);\n  });\n\n  return instance;\n};\n\nexport default {\n  info(options: MessageActionOptionsType) {\n    return showMessage(options, MessageType.info);\n  },\n  success(options: MessageActionOptionsType) {\n    return showMessage(options, MessageType.success);\n  },\n  warning(options: MessageActionOptionsType) {\n    return showMessage(options, MessageType.warning);\n  },\n  error(options: MessageActionOptionsType) {\n    return showMessage(options, MessageType.error);\n  },\n  hide() {\n    const instance = getInstance();\n    if (!instance) {\n      return;\n    }\n    instance.hide();\n  },\n};\n"]}